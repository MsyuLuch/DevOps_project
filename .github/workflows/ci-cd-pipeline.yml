# This is a basic workflow to help you get started with Actions

name: CI
env:
  UI_IMAGE: ${{ secrets.DOCKER_HUB_USERNAME }}/search_engine-ui:${{ github.sha }}
  CRAWLER_IMAGE: ${{ secrets.DOCKER_HUB_USERNAME }}/search_engine-cawler:${{ github.sha }}
  PROMETHEUS_IMAGE: ${{ secrets.DOCKER_HUB_USERNAME }}/search_engine-prometheus:${{ github.sha }}
  FLUENTD_IMAGE: ${{ secrets.DOCKER_HUB_USERNAME }}/search_engine-fluentd:1.0

# Controls when the workflow will run
on:
  push:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build-ui:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout / Git clone repo
        uses: actions/checkout@v3

      - name: Login to Dockerhub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Backend
        uses: docker/build-push-action@v3
        with:
          context: ./docker/src/search_engine_ui
          file: ./docker/src/search_engine_ui/Dockerfile
          push: true
          tags: ${{ env.UI_IMAGE }}

  build-crawler:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout / Git clone repo
        uses: actions/checkout@v3

      - name: Login to Dockerhub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Backend
        uses: docker/build-push-action@v3
        with:
          context: ./docker/src/search_engine_crawler
          file: ./docker/src/search_engine_crawler/Dockerfile
          push: true
          tags: ${{ env.CRAWLER_IMAGE }}

  build-prometheus:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout / Git clone repo
        uses: actions/checkout@v3

      - name: Login to Dockerhub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Backend
        uses: docker/build-push-action@v3
        with:
          context: ./docker/monitoring
          file: ./docker/monitoring/Dockerfile
          push: true
          tags: ${{ env.PROMETHEUS_IMAGE }}

  update-yc:
    runs-on: ubuntu-latest
    needs: [build-ui, build-crawler, build-prometheus]
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 0.12.8

    - name: Add key.json
      env:
        YC_SERVICE_ACCOUNT_KEY: ${{ secrets.YC_SA_JSON_CREDENTIALS }}
      run: |
        echo "$YC_SERVICE_ACCOUNT_KEY" >> key.json
        cat key.json
      working-directory: ./infra/terraform/stage

    - name: Add terraform tfvars file
      env:
        YC_TFVARS_K8S: ${{ secrets.YC_TFVARS_K8S }}
      run: 'echo "$YC_TFVARS_K8S" >> terraform.tfvars'
      working-directory: ./infra/terraform/stage

    - name: Add pub key
      env:
        YC_VM_SSH: ${{ secrets.YC_VM_SSH }}
      run: |
        mkdir ~/.ssh
        echo "$YC_VM_SSH" >> ~/.ssh/appuser.pub

    - name: Terraform init
      run: terraform init -backend=false
      working-directory: ./infra/terraform/stage

    - name: Terraform apply
      run: terraform apply --auto-approve
      working-directory: ./infra/terraform/stage

    - name: Install YC cli
      run: |
        curl https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash -s -- -a
        echo 'source /home/runner/yandex-cloud/completion.zsh.inc' >>  ~/.zshrc


    - name: Configure yc
      env:
        YC_CLOUD_ID: "{{ secrets.YC_CLOUD_ID }}"
        YC_FOLDER_ID: "{{ secrets.YC_FOLDER_ID }}"
        YC_TOKEN: "{{ secrets.YC_TOKEN }}"
      run: |
        yc config set cloud-id $YC_CLOUD_ID
        yc config set folder-id $YC_FOLDER_ID
        yc config set token $YC_TOKEN

    - name: Run playbook
      run: |
        ansible-playbook playbooks/deploy.yml
      working-directory: ./infra/ansible


    # - name: Deploy COI VM
    #   id: deploy-coi
    #   uses: yc-actions/yc-coi-deploy@v1.0.1
    #   env:
    #     UI_IMAGE: ${{ env.UI_IMAGE }}
    #     CRAWLER_IMAGE: ${{ env.CRAWLER_IMAGE }}
    #     PROMETHEUS_IMAGE: ${{ env.PROMETHEUS_IMAGE }}
    #     FLUENTD_IMAGE: ${{ env.FLUENTD_IMAGE }}
    #     YC_VM_SSH: ${{ secrets.YC_VM_SSH }}
    #     YC_VM_USERNAME: ${{ secrets.YC_VM_USERNAME }}
    #   with:
    #     yc-sa-json-credentials: ${{ secrets.YC_SA_JSON_CREDENTIALS }}
    #     folder-id: ${{ secrets.YC_FOLDER_ID }}
    #     VM-name: ${{ secrets.YC_VM_NAME }}
    #     vm-service-account-id: ${{ secrets.YC_SERVICE_ACCOUNT_ID }}
    #     vm-cores: 2
    #     vm-platform-id: 'standard-v2'
    #     vm-memory: 8Gb
    #     vm-disk-size: 30Gb
    #     vm-subnet-id: ${{ secrets.YC_SUBNET_ID }}
    #     docker-compose-path: './docker/docker-compose.yaml'
    #     user-data-path: './infra/user-data.yaml'
