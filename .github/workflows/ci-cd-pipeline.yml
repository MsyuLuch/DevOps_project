# This is a basic workflow to help you get started with Actions

name: CI
env:
  UI_IMAGE: ${{ secrets.DOCKER_HUB_USERNAME }}/search_engine-ui:${{ github.sha }}
  CRAWLER_IMAGE: ${{ secrets.DOCKER_HUB_USERNAME }}/search_engine-cawler:${{ github.sha }}
  PROMETHEUS_IMAGE: ${{ secrets.DOCKER_HUB_USERNAME }}/search_engine-prometheus:${{ github.sha }}
  FLUENTD_IMAGE: ${{ secrets.DOCKER_HUB_USERNAME }}/search_engine-fluentd:${{ github.sha }}

# Controls when the workflow will run
on: 
  push:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build-ui:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout / Git clone repo
        uses: actions/checkout@v3
        
      - name: Login to Dockerhub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
    
      - name: Setup Buildx
        uses: docker/setup-buildx-action@v2
    
      - name: Build Backend
        uses: docker/build-push-action@v3
        with:
          context: ./docker/src/search_engine_ui 
          file: ./docker/src/search_engine_ui/Dockerfile
          push: true
          tags: ${{ env.UI_IMAGE }}
          
  build-crawler:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout / Git clone repo
        uses: actions/checkout@v3
        
      - name: Login to Dockerhub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
    
      - name: Setup Buildx
        uses: docker/setup-buildx-action@v2
    
      - name: Build Backend
        uses: docker/build-push-action@v3
        with:
          context: ./docker/src/search_engine_crawler 
          file: ./docker/src/search_engine_crawler/Dockerfile
          push: true
          tags: ${{ env.CRAWLER_IMAGE }}          

  build-prometheus:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout / Git clone repo
        uses: actions/checkout@v3
        
      - name: Login to Dockerhub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
    
      - name: Setup Buildx
        uses: docker/setup-buildx-action@v2
    
      - name: Build Backend
        uses: docker/build-push-action@v3
        with:
          context: ./docker/monitoring 
          file: ./docker/monitoring/Dockerfile
          push: true
          tags: ${{ env.PROMETHEUS_IMAGE }}           

  build-fluetd:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout / Git clone repo
        uses: actions/checkout@v3
        
      - name: Login to Dockerhub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
    
      - name: Setup Buildx
        uses: docker/setup-buildx-action@v2
    
      - name: Build Backend
        uses: docker/build-push-action@v2
        with:
          context: ./docker/logging/fluentd 
          file: ./docker/logging/fluentd/Dockerfile
          push: true
          tags: ${{ env.FLUENTD_IMAGE }}      

  update-yc:
    runs-on: ubuntu-latest
    needs: [build-ui, build-crawler, build-prometheus, build-fluetd]
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Deploy COI VM
      id: deploy-coi
      uses: yc-actions/yc-coi-deploy@v1.0.1
      env:
        UI_IMAGE: ${{ env.UI_IMAGE }}
        CRAWLER_IMAGE: ${{ env.CRAWLER_IMAGE }}
        PROMETHEUS_IMAGE: ${{ env.PROMETHEUS_IMAGE }}
        FLUENTD_IMAGE: ${{ env.FLUENTD_IMAGE }}       
        YC_VM_SSH: ${{ secrets.YC_VM_SSH }}
        YC_VM_USERNAME: ${{ secrets.YC_VM_USERNAME }}
      with:
        yc-sa-json-credentials: ${{ secrets.YC_SA_JSON_CREDENTIALS }}
        folder-id: ${{ secrets.YC_FOLDER_ID }}
        VM-name: ${{ secrets.YC_VM_NAME }}
        vm-service-account-id: ${{ secrets.YC_SERVICE_ACCOUNT_ID }}
        vm-cores: 2
        vm-platform-id: 'standard-v2'
        vm-memory: 8Gb
        vm-disk-size: 30Gb
        vm-core-fraction: 5
        vm-subnet-id: ${{ secrets.YC_SUBNET_ID }}
        docker-compose-path: './docker/docker-compose.yml'
